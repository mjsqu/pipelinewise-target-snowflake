# This file runs CI/CD pipelines on GitLab
# it has been setup to provide testing on a mirror
default:
  image: python:3.10.11
  tags: 
    # Ensure that our pipelines only run on aws runners
    - aws

stages:
  - test

unit-test:
  stage: test
  when: manual
  script:
    - python -m venv venv
    - . venv/bin/activate
    - pip install --upgrade pip
    - pip install .[test]
    - pytest tests/unit

# Integration testing
integration-test:
  stage: test
  when: manual
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  # Get Snowflake Parameters from SSM Parameter Store - if AWS_ named variables exist
  before_script:
    - aws --version
    - yum -y install python3.8 python3.8-venv python3-pip
    - python3 --version
    - SESSION="$(aws sts assume-role --role-arn $AWS_ROLE --role-session-name target_snowflake_integration_testing)"
    # Extract the session token variables from the JSON payload
    - export AWS_ACCESS_KEY_ID=$(echo $SESSION | sed -r 's|.*AccessKeyId.{4}([A-Za-z0-9/+=]+).*|\1|')
    - export AWS_SECRET_ACCESS_KEY=$(echo $SESSION | sed -r 's|.*SecretAccessKey.{4}([A-Za-z0-9/+=]+).*|\1|')
    - export AWS_SESSION_TOKEN=$(echo $SESSION | sed -r 's|.*SessionToken.{4}([A-Za-z0-9/+=]+).*|\1|')
    - export no_proxy=s3.${AWS_DEFAULT_REGION}.amazonaws.com
    - export NO_PROXY=${no_proxy}

    - aws sts get-caller-identity
    - aws ssm get-parameters-by-path --with-decryption --path /meltano/target-snowflake --query 'Parameters[].[Name,Value]' --output text | awk -v FS='\t' -v OFS='\t' '{split($1,a,"/"); print toupper(a[4])"="$2}' > tests/integration/.env
    # Add AWS env variables to the end of the file without the TARGET_SNOWFLAKE prefix
    - grep AWS_ tests/integration/.env | sed 's/TARGET_SNOWFLAKE_//' >> tests/integration/.env
    # Check we have managed to obtain variables in the .env file
    - grep SNOWFLAKE_ACCOUNT tests/integration/.env

  script:
    - python3 -m venv venv
    - . venv/bin/activate
    - pip install --upgrade pip
    - pip install .[test]
    - pytest tests/integration -k test_loading_tables_with_no_encryption
